{"version":3,"sources":["campus_map.jpg","serviceWorker.js","index.js","App.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","state","start","end","buildings","coordString","handleSelectChange","event","_this","setState","Object","_home_apolywka_code_cse331_18au_apolywka_src_main_resources_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","name","value","handleStartClick","getPathCoords","handleResetClick","drawPath","this","getBuildings","here","fetch","method","response","arrayBuffer","buffer","buff","Buffer","console","log","toString","JSON","parse","url","coords","split","ctx","refs","canvas","getContext","img","drawImage","beginPath","lineWidth","strokeStyle","first","moveTo","parseInt","i","length","coordSplit","lineTo","stroke","menuItems","push","react__WEBPACK_IMPORTED_MODULE_6___default","_material_ui_core_MenuItem__WEBPACK_IMPORTED_MODULE_9___default","key","className","_material_ui_core_InputLabel__WEBPACK_IMPORTED_MODULE_7___default","htmlFor","_material_ui_core_Select__WEBPACK_IMPORTED_MODULE_8___default","onChange","style","width","displayEmpty","variant","inputProps","id","iterateBuildingsList","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_10___default","onClick","ref","height","src","require","alt","Component"],"mappings":"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","file":"static/js/main.c1037198.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/campus_map.11ca96d5.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {Component} from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\n\n\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    start: '',\n    end: '',\n    buildings: '',\n    coordString: '',\n  };\n\n  componentDidMount() {\n    // get the list of buildings after mounting\n    this.getBuildings();\n  };\n\n  handleSelectChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  handleStartClick = event => {\n    this.getPathCoords();\n  };\n\n  handleResetClick = event => {\n    this.setState({start: ''});\n    this.setState({end: ''});\n    this.setState({coordString: ''});\n    this.drawPath();\n  };\n\n  getBuildings() {\n    let here = this;\n\n    const options = {\n      method: 'get',\n    };\n\n    fetch('http://localhost:8080/path/buildings', options)\n      .then(response => response.arrayBuffer().then(function(buffer) {\n        var buff = new Buffer(buffer, 'binary');\n        console.log(buff.toString());\n        here.setState({buildings: JSON.parse(buff.toString())})\n      }));\n    this.drawPath();\n  }\n\n  getPathCoords() {\n    let here = this;\n\n    // if one of the fields is empty, get out of here\n    if (here.state.start === '' || here.state.end === '') {return}\n\n    const options = {\n      method: 'get',\n    };\n\n    var url = 'http://localhost:8080/path/' + here.state.start + \"/\" + here.state.end;\n\n    fetch(url, options)\n      .then(response => response.arrayBuffer().then(function(buffer) {\n        var buff = new Buffer(buffer, 'binary');\n        console.log(buff.toString());\n        here.setState({coordString: buff.toString()});\n        here.drawPath();\n      }));\n  }\n\n  drawPath() {\n    console.log(\"drawing path\");\n    let here = this;\n    if (here.state.coordString === '') {return}\n    var coords = this.state.coordString.split(\" \");\n    var can = this.refs.canvas;\n    var ctx = can.getContext(\"2d\");\n    var img = document.getElementById(\"image\");\n    ctx.drawImage(img, 0, 0, 1082, 741);\n    ctx.beginPath();\n    ctx.lineWidth=2;\n    ctx.strokeStyle=\"red\";\n    // this needs to be first coordinate\n    // split first element\n    var first = coords[0].split(\",\");\n    ctx.moveTo(parseInt(first[0]),parseInt(first[1]));\n\n    for (var i = 1; i < coords.length; i++) {\n      var coordSplit = coords[i].split(\",\");\n      ctx.lineTo(parseInt(coordSplit[0]), parseInt(coordSplit[1]));\n      ctx.stroke();\n    }\n  }\n\n  iterateBuildingsList() {\n    var menuItems = [];\n    for (var i = 0; i < this.state.buildings.length; i++ ) {\n      menuItems.push(<MenuItem key={i} value={this.state.buildings[i]}>{this.state.buildings[i]}</MenuItem>)\n    }\n    return menuItems;\n  }\n\n  render() {\n    return (\n      <div className=\"Selections\">\n        <InputLabel htmlFor=\"start\">Start</InputLabel>\n        <Select\n          className=\"start\"\n          value={this.state.start}\n          onChange={this.handleSelectChange}\n          style={{width:150}}\n          displayEmpty={true}\n          variant={'filled'}\n          inputProps={{\n            name: 'start',\n            id: 'start',\n          }}\n        >\n          {this.iterateBuildingsList()}\n        </Select>\n        <InputLabel htmlFor=\"end\">End</InputLabel>\n        <Select\n          value={this.state.end}\n          onChange={this.handleSelectChange}\n          style={{width:150}}\n          displayEmpty={true}\n          inputProps={{\n            name: 'end',\n            id: 'end',\n          }}\n        >\n          {this.iterateBuildingsList()}\n        </Select>\n\n        <Button\n          variant=\"contained\"\n          onClick={this.handleStartClick}\n        >\n          Get Path\n        </Button>\n\n        <Button\n          variant=\"contained\"\n          onClick={this.handleResetClick}\n        >\n          Reset\n        </Button>\n\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <div id=\"container\">\n              <canvas id=\"canvas\" ref=\"canvas\" width=\"1082\" height=\"741\"/>\n            </div>\n          </header>\n        </div>\n        {/*pretend this doesnt exist THANKS*/}\n        <div className=\"hidden\">\n          <img className=\"image\" id=\"image\" ref=\"image\" src={require(\"./campus_map.jpg\")} style={{width:1082, height:741}} alt={\"campus_map\"}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}